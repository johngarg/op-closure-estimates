#!/usr/bin/env python3

from fractions import Fraction

# Limits
PROCESSES = {
    "p->pi0e+",
    "p->pi0mu+",
    "p->eta0e+",
    "p->eta0mu+",
    "p->K0e+",
    "p->K0mu+",
    "p->pi+nu",
    "p->K+nu",
    "n->pi0nu",
    "n->eta0nu",
    "n->K0nu",
    "n->K+e-",
    "n->K+mu-",
    "n->pi-e+",
    "n->pi-mu+",
    "n->pi+e-",
    "n->pi+mu-",
}

HALF = Fraction("1/2")
D6_LEFT_OPERATOR_SYMMETRIES = {
    ###############################
    ####### Delta(B-L) = 0 ########
    ###############################
    ############################### S,LL_udd
    ("S,LL_udd", (1, 1, 1, 1)): (HALF, 0, -1, -1),
    ("S,LL_udd", (1, 2, 1, 1)): (0, 1, -1, -1),
    ("S,LL_udd", (1, 1, 2, 1)): (0, 1, -1, -1),
    ############################### S,LL_duu
    ("S,LL_duu", (1, 1, 1, 1)): (-HALF, 0, -1, -1),
    # ("S,LL_duu", (1,1,1,2)): (-HALF, 0, -1, -1),
    ("S,LL_duu", (2, 1, 1, 1)): (-1, 1, -1, -1),
    # ("S,LL_duu", (2,1,1,2)): (-1, 1, -1, -1),
    ############################### S,LR_duu
    ("S,LR_duu", (1, 1, 1, 1)): (-HALF, 0, -1, -1),
    # ("S,LR_duu", (1,1,1,2)): (-HALF, -1, -1),
    ("S,LR_duu", (2, 1, 1, 1)): (-1, 1, -1, -1),
    # ("S,LR_duu", (2,1,1,2)): (-1, 1, -1, -1),
    ############################### S,RL_duu
    ("S,RL_duu", (1, 1, 1, 1)): (-HALF, 0, -1, -1),
    # ("S,RL_duu", (1,1,1,2)): (-HALF, 0, -1, -1),
    ("S,RL_duu", (2, 1, 1, 1)): (-1, 1, -1, -1),
    # ("S,RL_duu", (2,1,1,2)): (-1, 1, -1, -1),
    ############################### S,RL_dud
    ("S,RL_dud", (1, 1, 1, 1)): (HALF, 0, -1, -1),
    ("S,RL_dud", (2, 1, 1, 1)): (0, 1, -1, -1),
    ("S,RL_dud", (1, 1, 2, 1)): (0, 1, -1, -1),
    ############################### S,RL_ddu
    ("S,RL_ddu", (1, 2, 1, 1)): (0, 1, -1, -1),
    ############################### S,RR_duu
    ("S,RR_duu", (1, 1, 1, 1)): (-HALF, 0, -1, -1),
    # ("S,RR_duu", (1,1,1,2)): (-HALF, 0, -1, -1),
    ("S,RR_duu", (2, 1, 1, 1)): (-1, 1, -1, -1),
    # ("S,RR_duu", (2,1,1,2)): (-1, 1, -1, -1),
    ###############################
    ####### Delta(B-L) = -2 #######
    ###############################
    ############################### S,LL_ddd
    ("S,LL_ddd", (1, 2, 1, 1)): (1, 1, -1, 1),
    # ("S,LL_ddd", (1,2,2,1)): (1, 1, -1, 1),
    ############################### S,LR_udd
    ("S,LR_udd", (1, 1, 1, 1)): (HALF, 0, -1, 1),
    ("S,LR_udd", (1, 2, 1, 1)): (0, 1, -1, 1),
    ("S,LR_udd", (1, 1, 1, 2)): (0, 1, -1, 1),
    ############################### S,LR_ddu
    ("S,LR_ddu", (1, 2, 1, 1)): (0, 1, -1, 1),
    ############################### S,LR_ddd
    ("S,LR_ddd", (1, 2, 1, 1)): (1, 1, -1, 1),
    # ("S,LR_ddd", (1,2,2,1)): (1, 1, -1, 1)
    ############################### S,RL_ddd
    ("S,RL_ddd", (1, 2, 1, 1)): (1, 1, -1, 1),
    # ("S,RL_ddd", (1,2,2,1)): (1, 1, -1, 1)
    ############################### S,RR_udd
    ("S,RR_udd", (1, 1, 1, 1)): (HALF, 0, -1, 1),
    ("S,RR_udd", (1, 2, 1, 1)): (0, 1, -1, 1),
    ("S,RR_udd", (1, 1, 1, 2)): (0, 1, -1, 1),
    ############################### S,RR_ddd
    ("S,RR_ddd", (1, 2, 1, 1)): (1, 1, -1, 1),
    # ("S,RR_ddd", (1,2,2,1)): (1, 1, -1, 1),
}

D7_LEFT_OPERATOR_SYMMETRIES = {
    ###############################
    ####### Delta(B-L) = 0 ########
    ###############################
    ############################### V,LR_udd
    ("V,LR_udd", (1, 1, 1, 1)): (HALF, 0, -1, -1),
    ("V,LR_udd", (1, 2, 1, 1)): (0, 1, -1, -1),
    ("V,LR_udd", (1, 1, 1, 2)): (0, 1, -1, -1),
    ############################### V,LR_ddu
    ("V,LR_ddu", (1, 1, 1, 1)): (HALF, 0, -1, -1),
    ("V,LR_ddu", (1, 2, 1, 1)): (0, 1, -1, -1),
    ############################### V,RR_ddu
    ("V,RR_ddu", (1, 1, 1, 1)): (HALF, 0, -1, -1),
    ("V,RR_ddu", (1, 2, 1, 1)): (0, 1, -1, -1),
    ############################### V,LR_uud
    ("V,LR_uud", (1, 1, 1, 1)): (-HALF, 0, -1, -1),
    # ("V,LR_uud", (1,1,1,2)): (-HALF, 0, -1, -1)
    ("V,LR_uud", (1, 1, 2, 1)): (-1, 1, -1, -1),
    # ("V,LR_uud", (1,1,2,2)): (-1, 1, -1, -1),
    ############################### V,RR_uud
    ("V,RR_uud", (1, 1, 1, 1)): (-HALF, 0, -1, -1),
    # ("V,RR_uud", (1,1,1,2)): (-HALF, 0, -1, -1)
    ("V,RR_uud", (1, 1, 2, 1)): (-1, 1, -1, -1),
    # ("V,RR_uud", (1,1,2,2)): (-1, 1, -1, -1),
    ############################### V,LR_udu
    ("V,LR_udu", (1, 1, 1, 1)): (-HALF, 0, -1, -1),
    # ("V,LR_udu", (1,1,1,2)): (-HALF, 0, -1, -1),
    ("V,LR_udu", (1, 2, 1, 1)): (-1, 1, -1, -1),
    # ("V,LR_udu", (1,2,1,2)): (-1, 1, -1, -1),
    ############################### V,LL_uud
    ("V,LL_uud", (1, 1, 1, 1)): (-HALF, 0, -1, -1),
    # ("V,LL_uud", (1,1,1,2)): (-HALF, 0, -1, -1),
    ("V,LL_uud", (1, 1, 2, 1)): (-1, 1, -1, -1),
    # ("V,LL_uud", (1,1,2,2)): (-1, 1, -1, -1),
    ############################### V,RL_uud
    ("V,RL_uud", (1, 1, 1, 1)): (-HALF, 0, -1, -1),
    # ("V,RL_uud", (1,1,1,2)): (-HALF, 0, -1, -1),
    ("V,RL_uud", (1, 1, 2, 1)): (-1, 1, -1, -1),
    # ("V,RL_uud", (1,1,2,2)): (-1, 1, -1, -1),
    ############################### V,RL_udu
    ("V,RL_udu", (1, 1, 1, 1)): (-HALF, 0, -1, -1),
    ("V,RL_udu", (1, 2, 1, 1)): (-1, 1, -1, -1),
    ###############################
    ####### Delta(B-L) = -2 #######
    ###############################
    ############################### V,RL_dud
    ("V,RL_dud", (1, 1, 1, 1)): (HALF, 0, -1, 1),
    ("V,RL_dud", (2, 1, 1, 1)): (0, 1, -1, 1),
    ("V,RL_dud", (1, 1, 1, 2)): (0, 1, -1, 1),
    ############################### V,LL_ddu
    ("V,LL_ddu", (1, 1, 1, 1)): (HALF, 0, -1, 1),
    ("V,LL_ddu", (1, 2, 1, 1)): (0, 1, -1, 1),
    ############################### V,RL_ddu
    ("V,RL_ddu", (1, 1, 1, 1)): (HALF, 0, -1, 1),
    ("V,RL_ddu", (1, 2, 1, 1)): (0, 1, -1, 1),
    ############################### V,LL_ddd
    ## Careful here that lepton index is last!
    ("V,LL_ddd", (1, 1, 1, 1)): (3 * HALF, 0, -1, 1),
    # ("V,LL_ddd", (1,1,1,2)): (3*HALF, 0, -1, 1),
    ("V,LL_ddd", (1, 2, 1, 1)): (1, 1, -1, 1),
    # ("V,LL_ddd", (1,2,1,2)): (1, 1, -1, 1),
    ############################### V,RL_ddd
    ("V,RL_ddd", (1, 1, 1, 1)): (3 * HALF, 0, -1, 1),
    # ("V,RL_ddd", (1,1,2,1)): (3*HALF, 0, -1, 1),
    ("V,RL_ddd", (1, 2, 1, 1)): (1, 1, -1, 1),
    # ("V,RL_ddd", (1,2,2,1)): (1,1, -1, 1),
    ("V,RL_ddd", (1, 1, 1, 2)): (1, 1, -1, 1),
    # ("V,RL_ddd", (1,1,2,2)): (1,1, -1, 1),
    ############################### V,LR_ddd
    ("V,LR_ddd", (1, 1, 1, 1)): (3 * HALF, 0, -1, 1),
    # ("V,LR_ddd", (1,1,2,1)): (3*HALF, 0, -1, 1),
    ("V,LR_ddd", (1, 2, 1, 1)): (1, 1, -1, 1),
    # ("V,LR_ddd", (1,2,2,1)): (1,1, -1, 1),
    ("V,LR_ddd", (1, 1, 1, 2)): (1, 1, -1, 1),
    # ("V,LR_ddd", (1,1,2,2)): (1,1, -1, 1),
    ############################### V,RR_ddd
    ## Careful here that lepton index is last!
    ("V,RR_ddd", (1, 1, 1, 1)): (3 * HALF, 0, -1, 1),
    # ("V,RR_ddd", (1,1,1,2)): (3*HALF, 0, -1, 1),
    ("V,RR_ddd", (1, 2, 1, 1)): (1, 1, -1, 1),
    # ("V,RR_ddd", (1,2,1,2)): (1, 1, -1, 1),
}

ALLOWED_PROCESSES = {
    (-HALF, 0, -1, -1): ["p->pi0e+", "p->eta0e+", "n->pi-e+"],
    (HALF, 0, -1, -1): ["p->pi+nu", "n->pi0nu", "n->eta0nu"],
    (HALF, 0, -1, 1): ["p->pi+nu", "n->pi0nu", "n->eta0nu"],
    (-1, 1, -1, -1): ["p->K0e+"],
    (0, 1, -1, -1): ["p->K+nu", "n->K0nu"],
    (0, 1, -1, 1): ["p->K+nu", "n->K0nu"],
    (3 * HALF, 1, -1, 1): ["n->pi+e-"],
    ## Should not appear
    # (0, -1, -1, -1): ["p->K0e+", "n->K-e+"],
    # (1, -1, -1, -1): ["n->K0nu"],
    # (1, -1, -1, 1): ["n->K0nu"],
}
